bool Start()인자는 구조체로 만들어도 된다.
SessionArray 배열
배열이 됬으니까 세션을 쓴다 안쓴다를 표현할 flag필요.
stack에는 빈 배열의 공간에대한 인덱스를 보관한다.
동기화 객체를 버리자.

AcceptThread는
accept함수로 블락되있다.
ret = OnConnectionRequest();
종료 판단
세션 확보
OnClientJoin(아이피와 폰트);
PostRecv();

accept함수가 리턴되면 OnConnectionRequest()함수 호출
이후 세션 배열의 빈 공간 확인
만약 다 찾다면?? => 대기열은 하나의 컨텐츠
동접자수를 더 많이 잡아 기준보다 넘은 클라이언트는 대기열로 취급하자.
세션이 재연결 한다 하면 I/O가 완료되지 않은 세션은 바로 삭제되지 않을 것.
즉 동접자수를 넉넉하게 잡아야 한다.

스레드 생성 시점은 start or 생성자.(start에서 만들자)

서버를 정지했다가 다시 가동하는 상황은 잘 없다.

정지한다 하면 모든 스레드를 없애고 다시 만들자.

workerThread
GQCS
에러처리
종료처리(closesocket때 링거 걸자)
if(recv완료)
{
완성된 메시지 확인
헤더 뺀 패킷
메시지 packet 당 OnRecv()
}

SendQ에 직렬화 버퍼의 포인터가 들어간다.

SendPacket(세션ID, *Packet)
{
세션 검색
세션[N].SendQ.Enqeue(&packet, 8);
}

SendPost
{
WSABUF[최대한 많이] => 많을 수록 WSASend()리턴이 늦어지지만 비례하진 않는다.
for()
 {
 *packet = SendQ.Deqeue();
 뽑은 Packet을 세션 구조체 공간에 보관해 놓자.
 WSABUF 세팅
 }
 직렬화버퍼를 몇개 보냈나를 기억해야 한다.
WSASend() 호출
}


smartPtr<CPacekt> packet = new CPacket;
packet .....
SendPacket(세션, 
